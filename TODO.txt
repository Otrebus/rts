+ Turn InputQueue into serving the user with a bunch of stuff that happened since the last query, like: key was held for this long (even though it might still be held), key was pressed+released. Maybe three different types of events - pressed, pressed+held, released. Removes the need from having to write to timeKey when it was last read, and ugly stuff like that
+ Add some hotkey for changing how the terrain renders - flat, wireframe, normal, and switches between them
+ Make the camera move slower along the terrain instead etc
+ Make camera switch between terrain following and freelook with some key
+ Add some way of drawing lines
+ Fix bmp writing
+ Setting camera position and transform in the materials classes seems a bit weird
+ Fix fov setting
+ Fix cam initialization (specially up)
+ Add entity system and selection mechanics (point/box)
+ Triangle picking doesn't pick the closest triangle
+ Work out the relationship between mesh3d and linemesh3d, the latter inherits a bunch of stuff it doesn't need from the former, they should inherit from a common base model or something
+ Fix a better way of assigning a color to selected bounding boxes
+ Remove all the mousestates and keystates of input outside input
+ Fix cameramodes
+ Selecting units and moving
+ Implement path finding
+ Figure out aspect ratio in debug mode
+ Unit picker/dropper
+ Unit collision detection
+ Boids:
  + Wall avoidance
  + Obstacle avoidance
  + Separation
  - Fix oscillation (reduce jittering: make velocityTarget exponentially averaged?)
+ Multithreaded path finding
+ "TODO: these vectors before normalization can be 0"
+ "TODO: is b in the right direction?"
- Check if checking for release input checks that release can be both startStart and stateEnd, check
+ Movement painting
- Attack movement type
* Shooting:
  + Target direction of gun should be relative
  + Set absolute gun direction
  + Shooting spawns a projectile
  + Add projectile to list of stuff (entities list?)
  + Projectile update
  + Terrain intersection
  - Shooting effects?
    + Gun recoil
    + Light, smoke, particles
+ Friendly/Enemy units
  + Make enemy units unselectable etc
  + Make friendly units react to enemy units (shoot, pursue?)
- "TODO: this is repeated elsewhere" - turret pos
- Units move through terrain at low fps
- Selectionmaterial shader doesn't use half of the stuff in it
- Paths are expressed backwards
- Optimize selection markers
+ "TODO: z is - ?"
+ Better heap for path finding (find min prio etc)
- Tank turret position etc should be constants and calculated once
- Models should be instantiated from a single source
- Reorganize project a bit
+ Gun vibrates ever so slightly
- Combine Preselected/selected, and selectionstate in userinterface - into bitfields maybe
- Add terrain/unit visualisations of all sorts (lines, arrows, dots, etc)
+ Move intersectRayOcclusion etc out of Terrain
+ Text output like fps counter
  - Signed-distance text?
- Debug console
+ Turrets are offset when the tank is on a slope
+ Degree suffix (that converts from degrees to radians?)
+ General refactoring, like ctrl+f "stuff like this should be moved to a more specialized place"
+ Fix terrain picking: "TODO: this is hit if ray.dir == 0"
- Fix and optimize intersectCirclePathOcclusion for longer searches
+ Scrollzoom towards pointer
+ Left-multiplication by scalar t*A
+ Guns spin when resizing window (?!)
- Make a better point picker function (viewray (should be ray)/terrain intersect)
+ Change setUp and setup
- Projectile::draw updates uniform and then draws, check if this is done everwhere and if we need updateuniform separate, in fact look into if we can reform uniforms/materials altogether
- Maybe t = inf is better to return when there's no intersection
+ Make camera polymorphic instead of using debug=true
- Make entity virtual base
- Fix normals for intersectCircleTrianglePath when the circle is inside the triangle
- Make sure derived classes have virtual destructors
- Move boundingbox mesh construction out of Entity
- Make inputqueue all static and remove getInstance
+ Breakacc vs forwardacc
+ Review the two vertex shaders for lines, if we can unify them 
- Now that we have geometric normals we don't really need to create a new mesh for flat rendering
- Fix flat terrain shading
- Remove the selecttriangle stuff, not needed anymore
- Terrain set scene / scene set terrain?
- Figure out mesh ownership
- Work out memory leaks
- Work out ownership of resources
- Unify keyinput and mouseinput in inputqueue
- BoundingBoxmodel creates mesh etc in constructor, unlike the others who do it in init, fix?
- Use subclasses of shader instead of adding shader type to constructor?